// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  MANAGER
  ADMIN
}

enum TopicContentType {
  TASK
  LECTURE
}

model User {
  id                   Int                    @id @default(autoincrement())
  username             String                 @unique @db.VarChar(30)
  password             String
  email                String?
  phone                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  role                 Role                   @default(STUDENT)
  profile              Profile?
  groupId              Int?
  group                Group?                 @relation(fields: [groupId], references: [id])
  LectureUserCompleted LectureUserCompleted[]
  TaskUserCompleted    TaskUserCompleted[]
  TaskUserAnswer       TaskUserAnswer[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String? @db.VarChar(30)
  lastName  String? @db.VarChar(30)
  age       Int?
  image     String?
  bio       String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Group {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(50)
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  users     User[]
}

model Subject {
  id        Int       @id @default(autoincrement())
  title     String    @unique @db.VarChar(60)
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  groups    Group[]
  sections  Section[]
}

model Answer {
  id              Int      @id @default(autoincrement())
  text            String   @db.VarChar(180)
  isCorrectAnswer Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  taskId          Int
  task            Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Task {
  id                Int                 @id @default(autoincrement())
  text              String
  image             String?
  tip               String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  topicId           Int
  topic             Topic               @relation(fields: [topicId], references: [id])
  userAnswers       TaskUserAnswer[]
  answers           Answer[]
  topicContent      TopicContent[]
  taskUserCompleted TaskUserCompleted[]
}

model TaskUserAnswer {
  id        Int      @id @default(autoincrement())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TaskUserCompleted {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  taskId Int
  task   Task @relation(fields: [taskId], references: [id])
}

model Lecture {
  id                   Int                    @id @default(autoincrement())
  title                String
  content              String?
  number               Int                    @default(autoincrement())
  image                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  topicId              Int
  topic                Topic                  @relation(fields: [topicId], references: [id])
  topicContent         TopicContent[]
  LectureUserCompleted LectureUserCompleted[]
}

model LectureUserCompleted {
  id        Int     @id @default(autoincrement())
  lectureId Int
  userId    Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model TopicContent {
  id          Int              @id @default(autoincrement())
  type        TopicContentType
  orderNumber Int              @unique @default(autoincrement())
  taskId      Int?
  task        Task?            @relation(fields: [taskId], references: [id])
  lectureId   Int?
  lecture     Lecture?         @relation(fields: [lectureId], references: [id])
  topicId     Int
  topic       Topic            @relation(fields: [topicId], references: [id])
}

model Topic {
  id           Int            @id @default(autoincrement())
  title        String?
  sectionId    Int
  section      Section        @relation(fields: [sectionId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  tasks        Task[]
  lectures     Lecture[]
  topicContent TopicContent[]
}

model Section {
  id        Int      @id @default(autoincrement())
  title     String?  @db.VarChar(150)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  topics    Topic[]
}

model RegRequest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(60)
  phone     String   @db.VarChar(20)
  email     String?  @db.VarChar(60)
  age       Int
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
