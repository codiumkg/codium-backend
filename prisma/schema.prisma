// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  MANAGER
  ADMIN
}

model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique @db.VarChar(30)
  password   String
  email      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  quizResult QuizResult[]
  role       Role         @default(STUDENT)
  profile    Profile?
  groupId    Int?         @unique
  group      Group?       @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String? @db.VarChar(30)
  lastName  String? @db.VarChar(30)
  age       Int?
  image     String?
  bio       String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(50)
  subjectId Int     @unique
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  users     User[]
}

model Subject {
  id        Int       @id @default(autoincrement())
  title     String    @unique @db.VarChar(60)
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  groups    Group[]
  sections  Section[]
}

model Answer {
  id              Int      @id @default(autoincrement())
  text            String   @db.VarChar(180)
  isCorrectAnswer Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  questionId      Int      @unique
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Question {
  id         Int      @id @default(autoincrement())
  text       String
  image      String?
  tip        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId     Int      @unique
  openAnswer String?
  answers    Answer[]
}

model Quiz {
  id          Int          @id @default(autoincrement())
  title       String       @unique @db.VarChar(150)
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  questions   Question[]
  quizResults QuizResult[]
  topic       Topic        @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     Int
}

model QuizResult {
  id          Int      @id @default(autoincrement())
  score       String
  teacherMark String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  quizId      Int      @unique
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Lecture {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  number    Int      @default(autoincrement())
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  topicId   Int      @unique
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Topic {
  id        Int       @id @default(autoincrement())
  title     String?
  sectionId Int       @unique
  section   Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  quizzes   Quiz[]
  lectures  Lecture[]
}

model Section {
  id        Int      @id @default(autoincrement())
  title     String?  @db.VarChar(150)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  subjectId Int      @unique
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  topics    Topic[]
}

model RegRequest {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(60)
  phone String @db.VarChar(20)
  age   Int
}
